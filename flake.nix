{
  description = "MyNixOS: Professional, multi-host NixOS config with flakes + Home Manager (standalone)";

  # Flake-level Nix configuration
  nixConfig = {
    # Prefer well-known binary caches for faster builds
    substituters = [
      "https://cache.nixos.org/"
    ];
    trusted-public-keys = [
      "cache.nixos.org-1:6NCHdD59X431o0gWypBMrAURkbJ16zPMQFGspcDShjY="
    ];
    experimental-features = [ "nix-command" "flakes" ];
  };

  inputs = {
    # Primary channel: nixpkgs unstable per roadmap
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";

    # Home Manager as flake input (standalone usage, but providing modules as well)
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # Optional hardware db for specific devices (left for later enablement)
    # nixos-hardware.url = "github:NixOS/nixos-hardware";
  };

  outputs = inputs: let
    inherit (inputs) nixpkgs home-manager; # nixos-hardware (optional)
    
    # Supported systems
    systems = [ "x86_64-linux" "aarch64-linux" ];
    forAllSystems = nixpkgs.lib.genAttrs systems;
    
    # Default system for hosts
    defaultSystem = "x86_64-linux";
    
    # Helper to make pkgs for a given system
    forSystem = system: import nixpkgs {
      inherit system;
      # Unfree handled via modules/unfree-packages.nix aggregation
      # (see features/base.nix imports)
      config = {};
    };
    
    # Helper to create NixOS configurations
    # Supports both base and variant configurations:
    #   "laptop" -> hosts/laptop/default.nix
    #   "laptop@personal" -> hosts/laptop/personal/personal.nix
    mkNixOSConfig = configName: system:
      let
        # Parse configName to extract host and optional variant
        parts = nixpkgs.lib.splitString "@" configName;
        hostName = builtins.head parts;
        hasVariant = builtins.length parts > 1;
        variantName = if hasVariant then builtins.elemAt parts 1 else null;
        
        # Generate path based on whether variant exists
        configPath = if hasVariant
          then ./hosts/${hostName}/${variantName}/${variantName}.nix
          else ./hosts/${hostName}/default.nix;
      in
      nixpkgs.lib.nixosSystem {
        inherit system;
        modules = [ 
          configPath 
          home-manager.nixosModules.home-manager
        ];
      };
  in {
    # Development shells for all supported systems
    devShells = forAllSystems (system: {
      default = (forSystem system).mkShell {
        packages = with (forSystem system); [
          # Add common CLI tools here (e.g., git, nixfmt, alejandra)
        ];
      };
    });

    # NixOS configurations for all hosts
    # Dynamically generated by scanning hosts/ directory
    nixosConfigurations = 
      let
        # List all directories in hosts/
        hostDirs = builtins.attrNames (builtins.readDir ./hosts);
        
        # Create base configurations for each host
        baseConfigs = builtins.listToAttrs (map (hostName: {
          name = hostName;
          value = mkNixOSConfig hostName defaultSystem;
        }) hostDirs);
        
        # Find all variant configurations
        variantConfigs = builtins.foldl' (acc: hostName:
          let
            hostPath = ./hosts/${hostName};
            # Check if host directory exists and list its contents
            hostContents = if builtins.pathExists hostPath 
                          then builtins.readDir hostPath 
                          else {};
            # Filter for directories that might be variants (exclude hardware-configuration.nix, default.nix)
            variantDirs = builtins.filter (name: 
              hostContents.${name} == "directory"
            ) (builtins.attrNames hostContents);
            
            # Create variant configs for each variant directory
            variants = builtins.listToAttrs (map (variantName:
              let
                variantPath = ./hosts/${hostName}/${variantName}/${variantName}.nix;
              in
              {
                name = "${hostName}@${variantName}";
                value = if builtins.pathExists variantPath
                       then mkNixOSConfig "${hostName}@${variantName}" defaultSystem
                       else null;  # Skip if file doesn't exist
              }
            ) variantDirs);
            
            # Filter out null values
            validVariants = builtins.removeAttrs variants 
              (builtins.filter (name: variants.${name} == null) (builtins.attrNames variants));
          in
          acc // validVariants
        ) {} hostDirs;
      in
      baseConfigs // variantConfigs;

    # Home Manager configurations (dynamically generated from usersList)
    homeConfigurations = (import ./modules/home-manager-generator.nix {
      pkgs = forSystem defaultSystem;
      inherit home-manager;
    }).homeConfigurations;
  };
}


