{
  description = "MyNixOS: Professional, multi-host NixOS config with flakes + Home Manager (standalone)";

  # Flake-level Nix configuration
  nixConfig = {
    # Prefer well-known binary caches for faster builds
    substituters = [
      "https://cache.nixos.org/"
    ];
    trusted-public-keys = [
      "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
    ];
    experimental-features = [ "nix-command" "flakes" ];
  };

  inputs = {
    # Primary channel: nixpkgs unstable per roadmap
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";

    # Home Manager as flake input (standalone usage, but providing modules as well)
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # Optional hardware db for specific devices (left for later enablement)
    # nixos-hardware.url = "github:NixOS/nixos-hardware";
  };

  outputs = inputs: let
    inherit (inputs) nixpkgs home-manager; # nixos-hardware (optional)

    # Helper to make pkgs for a given system
    forSystem = system: import nixpkgs {
      inherit system;
      config = {
        # Global policy per roadmap; allow overrides per host if needed
        allowUnfree = true;
      };
    };
    hmLib = home-manager.lib;
  in {
    # Example dev shell (optional, can add languages later)
    devShells = {
      x86_64-linux.default = (forSystem "x86_64-linux").mkShell {
        packages = with (forSystem "x86_64-linux"); [
          # Add common CLI tools here (e.g., git, nixfmt)
        ];
      };
    };

    # NixOS configurations. Add more hosts under hosts/* and list them here.
    nixosConfigurations = {
      # Laptop example host per roadmap; adjust/extend as we implement modules and roles.
      laptop-casper = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        modules = [
          # Autogenerated by nixos-generate-config on target machine; placeholder for now
          # ./hosts/laptop-casper/hardware-configuration.nix

          # Base host entrypoint
          ./hosts/laptop-casper/default.nix

          # Optionally pull Home Manager as a NixOS module instead of standalone per-host
          # (We are using standalone HM primarily; this line shows how to wire it if desired.)
          # home-manager.nixosModules.home-manager
        ];
      };

      server-01 = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        modules = [
          ./hosts/server-01/default.nix
        ];
      };

      desktop-casper = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        modules = [
          ./hosts/desktop-casper/default.nix
        ];
      };
    };

    # Home Manager configurations (standalone), addressable via flake
    homeConfigurations = {
      # Usage: home-manager switch --flake .#casper@laptop-casper
      "casper@laptop-casper" = hmLib.homeManagerConfiguration {
        pkgs = forSystem "x86_64-linux";
        modules = [
          ./home/casper/default.nix
        ];
        # Optional: extraSpecialArgs = { inherit inputs; };
      };
    };
  };
}


